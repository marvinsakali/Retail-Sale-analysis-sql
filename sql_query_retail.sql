-- creating the database
DROP DATABASE IF EXISTS p1_retail_db;
CREATE DATABASE p1_retail_db;

-- Creating the table with the data
DROP TABLE IF EXISTS retail_sales;
CREATE TABLE retail_sales
(
transactions_id INT PRIMARY KEY,
sale_date DATE,
sale_time TIME,
customer_id INT,
gender VARCHAR(15),
age INT,
category VARCHAR(15),
quantiy INT,
price_per_unit FLOAT,
cogs FLOAT,
total_sale FLOAT

);

-- Data exploration and cleaning
-- records count
SELECT COUNT(*)
FROM retail_sales;

-- Customer Count: Find out how many unique customers are in the dataset.
SELECT 
    COUNT(DISTINCT customer_id) AS unique_customers
FROM
    retail_sales;
    
-- Category Count: Identify all unique product categories in the dataset.
SELECT 
    COUNT(DISTINCT category) AS categories
FROM
    retail_sales;

-- checking the product categories
SELECT DISTINCT
    category
FROM
    retail_sales;

-- Null value check
SELECT 
    *
FROM
    retail_sales
WHERE
    transactions_id IS NULL
        OR sale_date IS NULL
        OR sale_time IS NULL
        OR customer_id IS NULL
        OR gender IS NULL
        OR age IS NULL
        OR category IS NULL
        OR quantiy IS NULL
        OR price_per_unit IS NULL
        OR cogs IS NULL
        OR total_sale IS NULL;
        
-- Delete Null rows
DELETE FROM retail_sales 
WHERE
    transactions_id IS NULL
    OR sale_date IS NULL
    OR sale_time IS NULL
    OR customer_id IS NULL
    OR gender IS NULL
    OR age IS NULL
    OR category IS NULL
    OR quantiy IS NULL
    OR price_per_unit IS NULL
    OR cogs IS NULL
    OR total_sale IS NULL;
    
-- Data analysis
-- Write a SQL query to retrieve all columns for sales made on '2022-11-05:
SELECT *
FROM retail_sales
WHERE sale_date = '2022-11-05';

-- Write a SQL query to retrieve all transactions where the category is 'Clothing' and the quantity sold is more than 4 in the month of Nov-2022:
SELECT 
    *
FROM
    retail_sales
WHERE
    category = 'clothing' AND quantiy > 3
        AND SUBSTRING(sale_date, 1, 7) = '2022-11';
        
-- Write a SQL query to calculate the total sales (total_sale) and number of orders for each category.:
SELECT 
    category,
    SUM(total_sale) AS total_sales,
    COUNT(*) AS total_orders
FROM
    retail_sales
GROUP BY category
ORDER BY 2 DESC;

-- Write a SQL query to find the average age of customers who purchased items from the 'Beauty' category.:
SELECT 
    category, AVG(age) AS avg_age
FROM
    retail_sales
WHERE
    category = 'Beauty'
GROUP BY 1
;
-- Write a SQL query to find all transactions where the total_sale is greater than 1000.:
SELECT 
    *
FROM
    retail_sales
WHERE
    total_sale > 1000;

-- Write a SQL query to find the total number of transactions (transactions_id) made by each gender in each category.:
SELECT DISTINCT
    gender, category, COUNT(transactions_id) as transactions
FROM
    retail_sales
GROUP BY category , gender
ORDER BY 2 DESC;

-- Write a SQL query to calculate the average sale for each month. Find out best selling month in each year
SELECT YEAR(sale_date) as years, MONTH(sale_date) as months, ROUND(AVG(total_sale), 2) as aveg_sales
FROM retail_sales
GROUP BY YEAR(sale_date), MONTH(sale_date)
ORDER BY 3 DESC;

--  adding rank
WITH best_selling_month(years, months, avg_sales) AS 
(
SELECT YEAR(sale_date) as years, MONTH(sale_date) as months, ROUND(AVG(total_sale), 2) as avg_sales
FROM retail_sales
GROUP BY years, months
),
best_months AS
(
SELECT years, months, avg_sales, DENSE_RANK() OVER(PARTITION BY  years ORDER BY avg_sales DESC ) as ranking
FROM best_selling_month
)
SELECT years, months, avg_sales, ranking
FROM best_months
WHERE ranking = 1;

-- Write a SQL query to find the top 5 customers based on the highest total sales 
SELECT DISTINCT customer_id, SUM(total_sale)
FROM retail_sales
GROUP BY customer_id
ORDER BY 2 DESC
LIMIT 5;

-- Write a SQL query to find the number of unique customers who purchased items from each category.:
SELECT  category, COUNT(DISTINCT customer_id) as unique_customers
FROM retail_sales
GROUP BY category;

-- Write a SQL query to create each shift and number of orders (Example Morning <12, Afternoon Between 12 & 17, Evening >17):
WITH hourly_shift AS
(
SELECT *,
	CASE 
    WHEN HOUR(sale_time) < 12 THEN 'Morning'
    WHEN HOUR(sale_time) BETWEEN 12 AND 17 THEN 'Afternoon'
    ELSE 'Evening'
    END as shift
FROM retail_sales
) 
SELECT shift, COUNT(*) as orders
FROM hourly_shift
GROUP BY shift;

SELECT *
FROM retail_sales
;

-- Write a SQL query to find the top 10 customers who have made the most purchases.
SELECT DISTINCT
    customer_id, COUNT(transactions_id) AS total_orders
FROM
    retail_sales
GROUP BY customer_id
ORDER BY 2 DESC
LIMIT 10;

-- Write a SQL query to determine the total revenue generated by different customer age groups (e.g., 18-25, 26-35, 36-50, 51+).
WITH age_group AS 
(
SELECT *, 
	CASE 
    WHEN age BETWEEN 18 AND 25 THEN 'Young (18-25)'
    WHEN age BETWEEN 26 AND 35 THEN 'Young adults (26-35)'
    WHEN age BETWEEN 36 AND 50 THEN 'Adults (36-50)'
    ELSE 'Old (51+)'
    END AS age_bracket
From retail_sales
) 
SELECT age_bracket, SUM(total_sale) as total_revenue
FROM age_group
GROUP BY age_bracket
ORDER BY 2 DESC;

-- Write a SQL query to identify the  products with the highest total profit (total sale - cost of goods sold).

SELECT DISTINCT
    category,
    SUM(total_sale) AS total_sale,
    ROUND(SUM(cogs), 0) AS total_cogs,
    ROUND(SUM(total_sale - cogs), 0) AS total_profit
FROM
    retail_sales
GROUP BY category
ORDER BY 4 DESC
;

-- Write a SQL query to find the products that were sold the most and least in the last 3 months.
SELECT 
    category,
    SUBSTRING(sale_date, 1, 7) years,
    SUM(total_sale) AS total_sales
FROM
    retail_sales
GROUP BY 1 , 2
ORDER BY 2 DESC , 3 DESC;

-- Alternatively
SELECT 
    category, SUM(total_sale) AS total_sales
FROM
    retail_sales
WHERE
    sale_date BETWEEN '2023-10-01' AND '2023-12-31'
GROUP BY category
ORDER BY 2 DESC;

-- Write a SQL query to calculate the average number of items purchased per customer transaction.
SELECT 
    transactions_id, ROUND(AVG(quantiy), 0) AS avg_items
FROM
    retail_sales
GROUP BY transactions_id;

-- Write a SQL query to determine which day of the week generates the highest total sales
SELECT 
    DAYNAME(sale_date) AS day_of_week,
    SUM(total_sale) AS total_sale
FROM
    retail_sales
GROUP BY 1
ORDER BY 2 DESC;

-- Write a SQL query to identify the months that consistently have the highest and lowest sales over the years.
SELECT 
    MONTHNAME(sale_date) AS months,
    YEAR(sale_date) AS years,
    MONTH(sale_date) AS months,
    SUM(total_sale) AS total_sale
FROM
    retail_sales
GROUP BY 2 , 1 , 3
ORDER BY 4 DESC;

-- best perfoming months
SELECT 
    MONTHNAME(sale_date) AS month_name,
    MONTH(sale_date) AS month_number,
    ROUND(AVG(total_sale), 2) AS avg_monthly_sales
FROM
    retail_sales
GROUP BY month_name , month_number
ORDER BY avg_monthly_sales DESC;




